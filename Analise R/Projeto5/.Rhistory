load("D:/Users/Higor/Documents/Anomalias de Codigo/estudos-linguagem-R/Analise R/Projeto2/.RData")
load("D:/Users/Higor/Documents/Anomalias de Codigo/estudos-linguagem-R/Analise R/Projeto2/.RData")
#Resumos
head(vendas)
#Variaveis numericas
quantile(vendas$Valor)
str(vendas)
#Media
?mean
setwd('D:/Users/Higor/Documents/Anomalias de Codigo/estudos-linguagem-R/Analise R/Projeto3')
notas <- read.csv('Notas.csv', fileEncoding = 'Windows-1252')
#Resumo de tipos de dados e estatisticas
View(notas)
str(notas)
#Resumo de tipos de dados e estatisticas
View(notas)
summary(notas$TurmaB)
mean(notas$TurmaA)
mean(notas$TurmaB)
sd(notas$TurmaA)
sd(notas$TurmaB)
coeficiente_ta <- (sd(notas$TurmaA) / mean(notas$TurmaA)) * 100
coeficiente_tb <- (sd(notas$TurmaB) / mean(notas$TurmaB)) * 100
print(coeficiente_ta, coeficiente_tb)
print(coeficiente_ta)
print(coeficiente_tb)
setwd("D:/Users/Higor/Documents/Anomalias de Codigo/estudos-linguagem-R/Analise R")
calculaModa <- function(v){
val_unico <- unique(v)
unique[which.max(tabulate(match(v, val_unico)))]
}
calculaModa(notas$TurmaA)
calculaModa(notas$Turma
calculaModa <- function(v){
val_unico <- unique(v)
val_unico[which.max(tabulate(match(v, val_unico)))]
}
calculaModa <- function(v){
val_unico <- unique(v)
val_unico[which.max(tabulate(match(v, val_unico)))]
}
calculaModa(notas$TurmaA)
calculaModa(notas$TurmaB)
calculaModa <- function(v){
val_unico <- unique(v)
val_unico[which.max(tabulate(match(v, val_unico)))]
}
#Qual turma teve maior discrepancia de notas?
sd(notas$TurmaA)
#Qual nota apareceu mais em cada turma?
calculaModa <- function(v){
val_unico <- unique(v)
val_unico[which.max(tabulate(match(v, val_unico)))]
}
View(calculaModa)
dados <- read.table("Usuarios.csv")
setwd('D:/Users/Higor/Documents/Anomalias de Codigo/estudos-linguagem-R/Analise R/Projeto4')
dados <- read.table("Usuarios.csv")
dados <- read.table("Usuarios.csv",
dec = '.',
sep = ',',
h = T,
fileEncoding = 'windows-1252')
dados <- read.table("Usuarios.csv",
dec = '.',   #Aqui, é definido o separador das casas decimais, "."
sep = ',',   #Aqui, o separador de colunas, ","
h = T,       #E aqui, considera a primeira linha com cabeçalho(header)
fileEncoding = 'windows-1252')
#Exibição de dados
View(dados)
names(dados) #Nome das colunas
str(dados)
summary(dados$grau_instrucao)
#Exibição de dados
View(dados)
View(frequencia)
frequencia <- table(dados$grau_instrucao)
View(frequencia)
frequencia_relativa <- prop.table(frequencia)
View(frequencia_relativa)
#Tabela de frequencia relativa
frequencia_relativa <- prop.table(frequencia) * 100 #A multiplicação por 100 para deixar os valores mais agradaveis
frequencia_relativa <- prop.table(frequencia) * 100 #A multiplicação por 100 para deixar os valores mais agradaveis
View(frequencia_relativa)
frequencia <- c(frequencia, sum(frequencia)) #Relembrando, função c() concatena
names(frequencia)[4] <- 'Total'
View(frequencia)
View(frequencia)
View(frequencia)
View(frequencia)
#Tabela de frequencias
frequencia <- table(dados$grau_instrucao)
View(frequencia)
frequencia <- c(frequencia, sum(frequencia)) #Relembrando, função c() concatena
names(frequencia)[4] <- 'Total'
View(frequencia)
#Adicionando linhas de total
frequencia <- table(c(frequencia, sum(frequencia))) #Relembrando, função c() concatena
View(frequencia)
frequencia <- table(c(frequencia, sum(frequencia))) #Relembrando, função c() concatena
names(frequencia)[4] <- 'Total'
View(frequencia)
#Tabela de frequencias
frequencia <- table(dados$grau_instrucao)
frequencia <- c(frequencia, sum(frequencia)) #Relembrando, função c() concatena
names(frequencia)[4] <- 'Total'
View(frequencia)
frequencia_relativa <- c(frequencia_relativa, sum(frequencia_relativa))
View(frequencia_relativa)
View(calculaModa)
tabela_final <- cbind(frequencia, frequencia_relativa = round(frequencia_relativa, digits = 2))
View(tabela_final)
frequencia <- c(frequencia, sum(frequencia)) #Relembrando, função c() cria vetores de palavras
names(frequencia)[4] <- 'Total'
View(frequencia)
#Adicionandos linhas de total de frequencia relativa
frequencia_relativa <- c(frequencia_relativa, sum(frequencia_relativa))
View(frequencia_relativa)
#Cria uma tabela final
tabela_final <- cbind(frequencia, frequencia_relativa = round(frequencia_relativa, digits = 2))
View(tabela_final)
setwd('D:/Users/Higor/Documents/Anomalias de Codigo/estudos-linguagem-R/Analise R/Projeto5')
vetor_dados
vetor_dados <- c(5, 1, 6, 12, 10, 25)
name(vetor_dados) = c('A', 'B', 'C', 'D', 'E', 'F')
vetor_dados
barplot(vetor_dados)
barplot(vetor_dados, col = c(1,2,3,4,5))
barplot(vetor_dados, col=rgb(1,0,0,0.5))
col = c(1,2,3,4,5)
barplot(vetor_dados, col = c(1,2,3,4,5))
png('barplot.png', width = 480, height = 480)
barplot(vetor_dados,
col = rgb(1,0,0,0.5),
xlab = 'Categorias',
ylab = 'Valores',      #xlab() e ylab() definem as legendas dos dados
main = 'Barplot em R', #Dá um titulo ao grafico
ylim = c(0,50)) #Impõe limite a uma dimensão
dev.off()
png('barplot.png', width = 480, height = 480)
barplot(vetor_dados,
col = rgb(1,0,0,0.5),
xlab = 'Categorias',
ylab = 'Valores',      #xlab() e ylab() definem as legendas dos dados
main = 'Barplot em R', #Dá um titulo ao grafico
ylim = c(0,30)) #Impõe limite a uma dimensão
dev.off()
library(ggplot2)
View(mtcars)
#ggplot2
library(ggplot2)
#Segundo barplot
ggplot(mtcars, aes(x = as.factor(cly))) + geom_bar()
#Segundo barplot
ggplot(mtcars, aes(x = as.factor(cyl))) + geom_bar()
View(mtcars) #Uma tabela que vem de base no R
#Terceiro barplot
ggplot(dados, aes(x = group, y = value, fill = group)) + geom_bar(width = 0.85, stat = 'identity')
#Mais dados de exemplo
dados = data.frame(group = c('A','B','C','D'), value = c(33,62,57,64))
#Terceiro barplot
ggplot(dados, aes(x = group, y = value, fill = group)) + geom_bar(width = 0.85, stat = 'identity')
partes <- c(4,8,16,10,12)
estados <- c('Sergipe, Maranhão, Ceará, Bahia', 'Paraiba')
pie(partes, labels = estados, main = "Estados por quantidade de arranha-ceus")
pie(partes, labels = )
pie(partes, labels = estados, main = "Estados por quantidade de arranha-ceus")
partes <- c(4,8,16,10,12)
estados <- c('Sergipe', 'Maranhão', 'Ceará', 'Bahia', 'Paraiba')
pie(partes, labels = estados, main = "Estados por quantidade de arranha-ceus")
install.packages('plotrix')
library('plotrix')
partes <- c(4,8,16,10,12)
estados <- c('Sergipe', 'Maranhão', 'Ceará', 'Bahia', 'Paraiba')
pie3D(partes, labels = estados, main = "Estados por quantidade de arranha-ceus")
plot(carros, type = 'o', col = 'orange', ylim = c(0,10))
carros <- c(1,3,5,7,9)
caminhoes <- c(2,4,6,8,10)
plot(carros, type = 'o', col = 'orange', ylim = c(0,10))
carros <- c(1,4,3,6,12)
caminhoes <- c(2,5,1,9,10)
plot(carros, type = 'o', col = 'orange', ylim = c(0,10))
plot(carros, type = 'o', col = 'orange', ylim = c(0,12))
?plot
plot(carros, type = 'o', col = 'darkblue', ylim = c(0,12))
lines(caminhoes, type = 'o', col = 'wine')
lines(caminhoes, type = 'o', col = 'red', ylim = c(0,12))
title(main = 'Produção de veículos em Março (em centenas)', col.main = 'red', font.main = 4)
title(main = 'Produção de veículos em Março (em centenas)', col.main = 'red', font.main = 1)
carros <- c(1,4,3,6,12)
caminhoes <- c(2,5,1,9,10)
?plot
plot(carros, type = 'o', col = 'darkblue', ylim = c(0,12))
?lines
lines(caminhoes, type = 'o', col = 'red', ylim = c(0,12))
title(main = 'Produção de veículos em Março (em centenas)', col.main = 'red', font.main = 1)
#Boxplot
view(mpg)
#Boxplot
View(mpg)
ggplot(mpg, aes(x = reorder(class,hwy), y = hwy, fill = class)) +
geom_boxplot() +
xlab('class') +
theme(legend.position = 'none' )
#Scatter plot
?data.frame
data = data.frame(cond = rep(c('Condição 1', 'Condição 2'), each = 10),
my_x = 1:100 + rnorm(100, sd = 9), my_y = 1:100 + rnorm(100, sd=16))
View(data)
ggplot()
View(data)
View(data)
ggplot(data, aes(x = my_x, y = my_y) + geom_point(shape = 1))
data = data.frame(cond = rep(c('Condição 1', 'Condição 2'), each = 10), #Cria repetição de Condição 1 e 2 a cada 10 unidades
my_x = 1:100 + rnorm(100, sd = 9), my_y = 1:100 + rnorm(100, sd=16)) #Gera valores aleatorios
View(data)
ggplot(data, aes(x = my_x, y = my_y) + geom_point(shape = 1))
ggplot(data, aes(x = my_x, y = my_y)) + geom_point(shape = 1)
#Scatter plot com uma linha de regressão
ggplot(data, aes(x = my_x, y = my_y)) + geom_point(shape = 1) +
geom_smooth(method = 1, color = 'red', se = FALSE)
#Scatter plot com uma linha de regressão
ggplot(data, aes(x = my_x, y = my_y)) + geom_point(shape = 1) +
geom_smooth(method = m, color = 'red', se = FALSE)
#Scatter plot com uma linha de regressão
ggplot(data, aes(x = my_x, y = my_y)) + geom_point(shape = 1) +
geom_smooth(method = lm, color = 'red', se = FALSE)
#Scatter plot com uma linha de regressão
ggplot(data, aes(x = my_x, y = my_y)) + geom_point(shape = 1) +
geom_smooth(method = lm, color = 'red', se = TRUE)
FALSE
#Scatter plot com uma linha de regressão
ggplot(data, aes(x = my_x, y = my_y)) + geom_point(shape = 1) +
geom_smooth(method = lm, color = 'red', se = FALSE)
install.packages('treemap')
library(treemap)
grupo = c(rep('grupo 1', 4), rep('grupo 2', 2), rep('grupo 3', 3))
subgrupo = paste('subgrupo', c(1,2,3,4,1,2,1,2,3), sep = '-')
valor = c(25,4,12,16,22,8,1,19,15)
dados = data.frame(grupo, subgrupo, valor)
View(dados)
treemap(dados,
index = c('Grupo', 'Subgrupo'),
vSize = 'valor',
type = 'index',
fontsize.labels = c(12,8),
fontcolor.labels = c('white', 'orange'),
fontface.labels = c(2,1),
bg.labels = 220,
align.labels = list(c('center', 'center'), c('right', 'bottom')),
overlap.labels = 0.5,
inflate.labels = F)
grupo = c(rep('grupo 1', 4), rep('grupo 2', 2), rep('grupo 3', 3))
subgrupo = paste('subgrupo', c(1,2,3,4,1,2,1,2,3), sep = '-')
valor = c(25,4,12,16,22,8,1,19,15)
dados = data.frame(grupo, subgrupo, valor)
View(dados
View(dados)
View(dados)
treemap(dados,
index = c('Grupo', 'Subgrupo'),
vSize = 'valor',
type = 'index',
fontsize.labels = c(12,8),
fontcolor.labels = c('white', 'orange'),
fontface.labels = c(2,1),
bg.labels = 220,
align.labels = list(c('center', 'center'), c('right', 'bottom')),
overlap.labels = 0.5,
inflate.labels = F)
treemap(dados,
index = c('grupo', 'gubgrupo'),
vSize = 'valor',
type = 'index',
fontsize.labels = c(12,8),
fontcolor.labels = c('white', 'orange'),
fontface.labels = c(2,1),
bg.labels = 220,
align.labels = list(c('center', 'center'), c('right', 'bottom')),
overlap.labels = 0.5,
inflate.labels = F)
treemap(dados,
index = c('grupo', 'gubgrupo'),
vSize = 'valor',
type = 'index',
fontsize.labels = c(12,8),
fontcolor.labels = c('white', 'orange'),
fontface.labels = c(2,1),
bg.labels = 220,
align.labels = list(c('center', 'center'), c('right', 'bottom')),
overlap.labels = 0.5,
inflate.labels = F)
grupo = c(rep('grupo-1', 4), rep('grupo-2', 2), rep('grupo-3', 3))
subgrupo = paste('subgrupo', c(1,2,3,4,1,2,1,2,3), sep = '-')
valor = c(25,4,12,16,22,8,1,19,15)
dados = data.frame(grupo, subgrupo, valor)
treemap(dados,
index = c('grupo', 'subgrupo'),
vSize = 'valor',
type = 'index',
fontsize.labels = c(12,8),
fontcolor.labels = c('white', 'orange'),
fontface.labels = c(2,1),
bg.labels = 220,
align.labels = list(c('center', 'center'), c('right', 'bottom')),
overlap.labels = 0.5,
inflate.labels = F)
grupo = c(rep('grupo-1', 4), rep('grupo-2', 2), rep('grupo-3', 3)) #Treemaps não aceitam palavras com underline
subgrupo = paste('subgrupo', c(1,2,3,4,1,2,1,2,3), sep = '-')
valor = c(25,4,12,16,22,8,1,19,15)
dados = data.frame(grupo, subgrupo, valor)
treemap(dados,
index = c('Grupo', 'Subgrupo'),
vSize = 'valor',
type = 'index',
fontsize.labels = c(12,8),
fontcolor.labels = c('white', 'orange'),
fontface.labels = c(2,1),
bg.labels = 220,
align.labels = list(c('center', 'center'), c('right', 'bottom')),
overlap.labels = 0.5,
inflate.labels = F)
treemap(dados,
index = c('grupo', 'subgrupo'),
vSize = 'valor',
type = 'index',
fontsize.labels = c(12,8),
fontcolor.labels = c('white', 'orange'),
fontface.labels = c(2,1),
bg.labels = 220,
align.labels = list(c('center', 'center'), c('right', 'bottom')),
overlap.labels = 0.5,
inflate.labels = F)
treemap(dados,
index = c('grupo', 'subgrupo'),
vSize = 'valor',
type = 'index',
fontsize.labels = c(12,10),
fontcolor.labels = c('white', 'orange'),
fontface.labels = c(2,1),
bg.labels = 220,
align.labels = list(c('center', 'center'), c('right', 'bottom')),
overlap.labels = 0.5,
inflate.labels = F)
treemap(dados,
index = c('grupo', 'subgrupo'),
vSize = 'valor',
type = 'index',
fontsize.labels = c(12,8),
fontcolor.labels = c('white', 'orange'),
fontface.labels = c(2,1),
bg.labels = 220,
align.labels = list(c('center', 'center'), c('right', 'bottom')),
overlap.labels = 0.5,
inflate.labels = F)
valor = c(25,4,12,16,22,8,5,19,15)
valor = c(25,4,12,16,22,8,5,19,15)
treemap(dados,
index = c('grupo', 'subgrupo'),
vSize = 'valor',
type = 'index',
fontsize.labels = c(12,8),
fontcolor.labels = c('white', 'orange'),
fontface.labels = c(2,1),
bg.labels = 220,
align.labels = list(c('center', 'center'), c('right', 'bottom')),
overlap.labels = 0.5,
inflate.labels = F)
treemap(dados,
index = c('grupo', 'subgrupo'),
vSize = 'valor',
type = 'index',
fontsize.labels = c(12,8),
fontcolor.labels = c('white', 'orange'),
fontface.labels = c(2,1),
bg.labels = 220,
align.labels = list(c('center', 'center'), c('right', 'bottom')),
overlap.labels = 0.5,
inflate.labels = F)
grupo = c(rep('grupo-1', 4), rep('grupo-2', 2), rep('grupo-3', 3)) #Treemaps não aceitam palavras com underline nem letra maiuscula
subgrupo = paste('subgrupo', c(1,2,3,4,1,2,1,2,3), sep = '-')
valor = c(25,4,12,16,22,8,5,19,15)
dados = data.frame(grupo, subgrupo, valor)
treemap(dados,
index = c('grupo', 'subgrupo'),
vSize = 'valor',
type = 'index',
fontsize.labels = c(12,8),
fontcolor.labels = c('white', 'orange'),
fontface.labels = c(2,1),
bg.labels = 220,
align.labels = list(c('center', 'center'), c('right', 'bottom')),
overlap.labels = 0.5,
inflate.labels = F)
#Histograma
x <- mtcars$mpg
?hist
h <- hist(x,
breaks = 10,
col = 'orange',
xlab = 'Milhas por galão',
main = 'Histograma com curva de distribuição')
xfit <- seq(min(x), max(x), length = 40)
yfit <- dnorm(xfit, mean = mean(x), sd = sd(x))
yfit <- yfit * diff(histo$mids[1:2]) * length(x)
lines(xfit, yfit, col = 'blue', lwd = 2)
histo <- hist(x,
breaks = 10,
col = 'orange',
xlab = 'Milhas por galão',
main = 'Histograma com curva de distribuição',)
lines(xfit, yfit, col = 'blue', lwd = 2)
xfit <- seq(min(x), max(x), length = 40)
yfit <- dnorm(xfit, mean = mean(x), sd = sd(x))
yfit <- yfit * diff(histo$mids[1:2]) * length(x)
lines(xfit, yfit, col = 'blue', lwd = 2)
dados-histo <- mtcars$mpg
?hist
histo <- hist(dados-histo,
breaks = 10,
col = 'orange',
xlab = 'Milhas por galão',
main = 'Histograma com curva de distribuição',)
#Personalizando o histograma
xfit <- seq(min(dados-histo), max(dados-histo), length = 40)
yfit <- dnorm(xfit, mean = mean(dados-histo), sd = sd(dados-histo))
yfit <- yfit * diff(histo$mids[1:2]) * length(dados-histo)
lines(xfit, yfit, col = 'blue', lwd = 2) #É criada uma linha que segue a média dos valores
dados-histo <- mtcars$mpg
#Histograma
dados-histo <- mtcars$mpg
#Histograma
dados_histo <- mtcars$mpg
dados_histo <- mtcars$mpg
?hist
histo <- hist(dados_histo,
breaks = 10,
col = 'orange',
xlab = 'Milhas por galão',
main = 'Histograma com curva de distribuição',)
#Personalizando o histograma
xfit <- seq(min(dados_histo), max(dados_histo), length = 40)
yfit <- dnorm(xfit, mean = mean(dados_histo), sd = sd(dados_histo))
yfit <- yfit * diff(histo$mids[1:2]) * length(dados_histo)
lines(xfit, yfit, col = 'blue', lwd = 2) #É criada uma linha que segue a média dos valores
#Histograma
dados_histo <- mtcars$mpg
View(dados_histo)
#Histograma usando ggplot
ggplot(dados_histo, aes(x = value)) + geom_histogram(binwidth = 0.05)
#Histograma usando ggplot
dados = data.frame(dados_histo)
View(dados)
tabela_histo = data.frame(dados_histo)
View(tabela_histo)
ggplot(tabela_histo, aes(x = value)) + geom_histogram(binwidth = 0.05)
View(tabela_histo)
ggplot(tabela_histo, aes(x = dados_histo)) + geom_histogram(binwidth = 0.05)
View(tabela_histo)
ggplot(tabela_histo, aes(x = dados_histo)) +
geom_histogram(binwidth = 0.5, color = 'white', fill = rgb(0.2,0.7,0.1,0.4))
ggplot(tabela_histo, aes(x = dados_histo)) +
geom_histogram(binwidth = 0.1, color = 'white', fill = rgb(0.2,0.7,0.1,0.4))
ggplot(tabela_histo, aes(x = dados_histo)) +
geom_histogram(binwidth = 0.1, color = 'white', fill = rgb(0.2,0.7,0.1,0.4))
ggplot(tabela_histo, aes(x = dados_histo)) +
geom_histogram(binwidth = 0.9, color = 'white', fill = rgb(0.2,0.7,0.1,0.4))
ggplot(tabela_histo, aes(x = dados_histo)) +
geom_histogram(binwidth = 1.2, color = 'white', fill = rgb(0.2,0.7,0.1,0.4))
#Versão do histograma com ordenação e indicação de cor próxima a média
ggplot(tabela_histo, aes(x = dados_histo)) +
geom_histogram(binwidth = 1.2, aes(fill = ..count..))
